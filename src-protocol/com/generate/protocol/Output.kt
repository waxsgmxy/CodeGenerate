package com.generate.protocol

/**
 * Created by yangzhilei on 16/9/8.
 */

fun line(count: Int): String {
    val builder = StringBuilder();
    for (x in 1..count) {
        builder.append("\n")
    }
    return builder.toString();
}

fun tab(count: Int): String {
    val builder = StringBuilder();
    for (x in 1..count) {
        builder.append("    ");
    }
    return builder.toString();
}

fun transField(wrap: String, field: Field): String {
    val builder = StringBuilder();
    builder.append("$wrap@ProtocolGenerate(key = \"${field.key}\")\n")
    builder.append("${wrap}public ${fieldMapping(field)} ${field.getFieldName()}${newBean(field)};${line(2)}")
    return builder.toString();
}

fun newBean(field: Field): String {
    when (field.fieldType) {
        FieldType.BEAN -> return " = new ${field.getBeanDeclare()}();";
        FieldType.LIST -> return " = new ArrayList<>();"
    }
    return ""
}

class OutputProtocol(val protocol: Protocol) {

    val builder = StringBuilder();

    fun append(text: String): StringBuilder {
        builder.append(text);
        return builder;
    }

    fun outProtocol(): String {
        begin();
        writeConstructor();
        writeRequests();
        writeOperation();
        writeResponse();
        writeBeans();
        end();
        return builder.toString();
    }

    fun begin() {
        append("package ${protocol.packageName};${line(2)}")
        append("import com.evergrande.eif.net.api.base.HDAnnotationMtpProtocol;\n")
        append("import com.evergrande.eif.net.api.base.IHDRequestListener;\n")
        append("import org.json.JSONObject;\n")
        append("import java.util.ArrayList;${line(2)}")
        note("generated by CodeGenerate,please don't edit it...");
        append("public class ${protocol.className} extends HDAnnotationMtpProtocol {${line(2)}")
    }

    fun end() {
        append("}")
    }

    fun writeConstructor() {
        append("    public ${protocol.className}(IHDRequestListener listener) {\n")
        append("        super(listener);\n");
        append("    }${line(2)}");
    }

    fun writeOperation() {
        append("    @Override\n");
        append("    public String getOperation() {\n");
        append("        return \"${protocol.operation}\";\n");
        append("    }${line(2)}");
    }

    fun writeRequestWithoutCookie() {
        if (!protocol.requestWithoutCookie) {
            append("    @Override\n")
            append("    public boolean requestWithoutCookie() {\n")
            append("        return ${protocol.requestWithoutCookie};\n")
            append("    }${line(2)}")
        }
    }

    fun note(note: String) {
        append("/**\n");
        append("  $note\n");
        append(" */\n");
    }

    fun writeRequests() {
        for (field in protocol.requests) {
            append(transField(tab(1), field));
        }
    }

    fun writeResponse() {
        if (protocol.responseClass != null) {
            append("    @Override\n")
            append("    public HDAnnotationMtpResponse<${protocol.responseClass}> transformSuccessResponse(JSONObject response) throws Exception {\n")
            append("        return new HDAnnotationMtpResponse<${protocol.responseClass}>(){}.parse(response);\n")
            append("    }${line(2)}")
        }
    }

    fun writeBeans() {
        for (beanDeclare in protocol.beanPool.values) {
            append(OutputBean(beanDeclare).outBean())
        }
    }
}

class OutputBean(val beanDeclare: BeanDeclare) {

    val builder = StringBuilder();

    fun outBean(): String {
        begin();
        for (field in beanDeclare.fields) {
            builder.append(transField("    ${wrap()}", field));
        }
        writeToString();
        end();
        return builder.toString();
    }

    fun begin() {
        append("public static class ${beanDeclare.className}{${line(2)}")

    }

    fun end() {
        append("}${line(2)}")
    }

    fun wrap(): String {
        return "    ";
    }

    fun append(text: String) {
        builder.append("${wrap()}$text");
    }

    fun writeToString() {
        append("    @Override\n")
        append("    public String toString() {\n")
        append("        StringBuilder builder = new StringBuilder();\n")
        for (field in beanDeclare.fields) {
            append("        append(builder, \"${field.key}\", ${field.getFieldName()});\n")
        }
        append("        return builder.toString();\n")
        append("    }\n")
    }
}